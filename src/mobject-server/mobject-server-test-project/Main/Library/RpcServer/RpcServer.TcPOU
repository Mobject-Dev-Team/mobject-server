<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="RpcServer" Id="{a6ca3c86-e0c6-4dcd-95d3-86401e8307e7}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
{attribute 'TcRpcEnable'}
FUNCTION_BLOCK RpcServer
VAR
	
	serverConfig : HeaderAccessor;
	payloadStringSizeIncludingNull : UDINT := Constants.PAYLOAD_STRING_SIZE + 1;
	
	// the middleware stack allows us to construct our server in any way needed.
	// by default we will support sessions, async polling and chunked requests/
	middlewareStack : MiddlewareStack;
	
	// responseId generation required for pending or chunked data
	sequentialResponseIdGenerator : SequentialResponseIdGenerator;
	
	// ability to support sessions...
	sessionIdGenerator : SequentialSessionIdGenerator;
	sessionManager : SessionManager(sessionIdGenerator, INACTIVE_SESSION_MAX_AGE);
	sessionsMiddleware : SessionsMiddleware(sessionManager, serverConfig);
	
	// ability to suppoort chunked requests
	chunkedRequestsManager : ChunkedRequestsManager(payloadStringSizeIncludingNull, sessionManager, serverConfig);
	chunkedRequestsMiddleware : ChunkedRequestsMiddleware(chunkedRequestsManager);
	
	// ability to support chunked responses
	chunkedResponseManager : ChunkedResponseManager(payloadStringSizeIncludingNull, sessionManager, sequentialResponseIdGenerator, serverConfig);
	chunkedResponsesMiddleware : ChunkedResponsesMiddleware(chunkedResponseManager);
	
	// ability to support pending responses
	asyncResponseManager : AsyncResponseManager(sessionManager, sequentialResponseIdGenerator, serverConfig);
	asyncResponseMiddleware : AsyncResponseMiddleware(asyncResponseManager);
	
	// ability to support rpc
	rpcHandlers : RpcHandlers;
	rpcManager : RpcManager(rpcHandlers, asyncResponseManager, serverConfig);
//	rpcMiddleware : RpcMiddleware(rpcManager);
	
END_VAR
VAR CONSTANT
	INACTIVE_SESSION_MAX_AGE : TIME := T#10S;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{63db7c18-245f-4309-a927-a9a0d3af3475}" />
    <Method Name="CyclicCall" Id="{dcccf970-b9d9-46f9-b549-fd4ad184d274}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sessionManager.CyclicCall();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{d6649ca6-46cd-40bd-9987-0427348a48b4}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MiddlewareStack.Use(sessionsMiddleware);
MiddlewareStack.Use(chunkedRequestsMiddleware);
MiddlewareStack.Use(chunkedResponsesMiddleware);
MiddlewareStack.Use(AsyncResponseMiddleware);
//MiddlewareStack.Use(rpcMiddleware);]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleRequest" Id="{3d2e86e3-73ad-4c89-953c-3f77c56a6a58}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD PUBLIC HandleRequest : ResponseData;
VAR_INPUT
	SerializedHeader : STRING(Constants.HEADER_STRING_SIZE);
	SerializedPayload : STRING(Constants.PAYLOAD_STRING_SIZE);
END_VAR
VAR
	header : Header(SerializedHeader);
	request : Request(header, SerializedPayload);
	serverResponse : ServerResponse(serverConfig);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[memset(ADR(HandleRequest),0,SIZEOF(HandleRequest));

middlewareStack.Handle(request, serverResponse);

IF NOT serverResponse.HeadersSent THEN
	serverResponse.Error('Unhandled Request');
END_IF

serverResponse.TryGetData(HandleRequest);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterRpcHandler" Id="{730f5881-44c9-4cd6-8a87-1e7a9eb94d2b}">
      <Declaration><![CDATA[METHOD PUBLIC RegisterRpcHandler
VAR_INPUT
	MethodName : T_MAXSTRING;
	Handler : I_RpcHandler;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rpcHandlers.RegisterHandler(MethodName, Handler);]]></ST>
      </Implementation>
    </Method>
    <Property Name="SessionCount" Id="{6a005cee-c114-4bed-aeb7-eb9242cc83e2}">
      <Declaration><![CDATA[PROPERTY PUBLIC SessionCount : DINT]]></Declaration>
      <Get Name="Get" Id="{f3d24968-eda2-4c6d-b3b0-4266fcd0a578}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SessionCount := sessionManager.SessionCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Use" Id="{a27dc16a-e55f-4ac5-ae80-86f182cea775}">
      <Declaration><![CDATA[METHOD PUBLIC Use
VAR_INPUT
	Middleware : I_Middleware;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[middlewareStack.Use(Middleware);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>