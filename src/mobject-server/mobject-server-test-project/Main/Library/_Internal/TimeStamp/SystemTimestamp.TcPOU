<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SystemTimestamp" Id="{ea19a859-c36f-4f5d-8c1d-8485a332a2c5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SystemTimestamp Implements I_Timestamp
VAR
	recordedTime : ULINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{bb871d24-455e-4c2e-ae78-02959f14f035}" />
    <Method Name="FB_init" Id="{56311796-8766-4c33-bc04-b9fee1e3cfb8}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetNow();]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsDurationElapsed" Id="{ea48c024-1445-4fb0-b91e-5139eed070de}">
      <Declaration><![CDATA[METHOD PUBLIC IsDurationElapsed : BOOL
VAR_INPUT
	Duration : TIME;
END_VAR
VAR
	currentTime : ULINT;
	elapsedDuration : ULINT;
	durationInHundredNs : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentTime := F_GetSystemTime();

// Convert duration from milliseconds to 100-nanosecond intervals.
// Since 1 ms = 10,000 * 100 ns.
durationInHundredNs := TIME_TO_ULINT(duration) * 10000; 

// Calculate the time that must elapse before the timestamp is considered 'expired'.
elapsedDuration := recordedTime + durationInHundredNs;

// Check if the current time is beyond the elapsed duration.
IsDurationElapsed := currentTime > elapsedDuration;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetNow" Id="{11d3ba98-9347-4637-89e3-7ea77319402d}">
      <Declaration><![CDATA[METHOD PUBLIC SetNow
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[recordedTime := F_GetSystemTime();]]></ST>
      </Implementation>
    </Method>
    <Property Name="TimeSince" Id="{62ab1b2e-2bc0-4650-b8c5-568d3a471dfc}">
      <Declaration><![CDATA[PROPERTY PUBLIC TimeSince : TIME]]></Declaration>
      <Get Name="Get" Id="{d309cd68-f815-4384-bfe5-74b290b70532}">
        <Declaration><![CDATA[VAR
	currentTime : ULINT;
	elapsedDurationInHundredNs : ULINT;
	convertTime : ULINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[currentTime := F_GetSystemTime();

elapsedDurationInHundredNs := currentTime - recordedTime;
convertTime := elapsedDurationInHundredNs / 10000;
TimeSince := ULINT_TO_TIME(convertTime);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="SystemTimestamp">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="SystemTimestamp.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="SystemTimestamp.IsDurationElapsed">
      <LineId Id="11" Count="9" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="SystemTimestamp.SetNow">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SystemTimestamp.TimeSince.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>