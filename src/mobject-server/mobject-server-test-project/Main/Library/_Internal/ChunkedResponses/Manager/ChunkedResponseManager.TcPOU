<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ChunkedResponseManager" Id="{4bf2c0c0-d5e1-4214-91d0-88383356e9d5}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ChunkedResponseManager Implements I_ChunkedResponseManager
VAR
	maximumChunkSizeInBytes : UDINT;
	sessionStorage : I_SessionStorage;
	responseIdGenerator : I_ResponseIdGenerator;
	config : I_ChunkedResponseManagerConfig;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{8218af57-8dd1-44fb-9bb4-518d21881b4b}" />
    <Folder Name="Private" Id="{198e251c-bc53-4e61-bf58-ffeea878d20f}" />
    <Method Name="CreateChunkedResponseData" Id="{061dd810-aac6-4cf1-9c2b-36d9360a11f9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC CreateChunkedResponseData : I_ChunkedResponseData
VAR_INPUT
	DataAddress : PVOID;
	DataSize : UDINT;
END_VAR
VAR
	pChunkedResponseData : POINTER TO ChunkedResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pChunkedResponseData := __NEW(ChunkedResponseData(Address := DataAddress, Size:=DataSize));
CreateChunkedResponseData := pChunkedResponseData^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7d4761c8-0080-4592-bff5-529156cf2644}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	MaximumChunkSizeInBytes : UDINT;
	SessionStorage : I_SessionStorage;
	ResponseIdGenerator : I_ResponseIdGenerator;
	Config : I_ChunkedResponseManagerConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.maximumChunkSizeInBytes := MaximumChunkSizeInBytes;
THIS^.sessionStorage := SessionStorage;
THIS^.responseIdGenerator := ResponseIdGenerator;
This^.config := Config;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleSuccess" Id="{8a7f7f97-8567-464c-8b51-a7240f7c9f00}">
      <Declaration><![CDATA[METHOD PUBLIC HandleSuccess : T_MAXSTRING;
VAR_INPUT
	OriginalResponse : I_ServerResponse;
	SourceAddress : PVOID;
	SourceSize : UDINT;
END_VAR
VAR
	sessionId : T_MAXSTRING;
	responseId : T_MAXSTRING;
	chunkedResponseData : I_ChunkedResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF SourceSize <= maximumChunkSizeInBytes THEN
	OriginalResponse.Success(SourceAddress, SourceSize);
	RETURN;
END_IF

IF NOT config.TryGetSessionIdFromResponse(OriginalResponse,sessionId) THEN
	OriginalResponse.Error('Unable to chunk oversized response without a sessionId');
	RETURN;
END_IF

chunkedResponseData := CreateChunkedResponseData(SourceAddress, SourceSize);
responseId := responseIdGenerator.Generate();

IF NOT sessionStorage.TryStoreSessionDataById(sessionId, responseId, chunkedResponseData) THEN
	OriginalResponse.Error('Unable to store oversized response');
	chunkedResponseData.Dispose();
	RETURN;
END_IF

config.UpdateResponseWithHasMoreChunks(OriginalResponse, responseId);
chunkedResponseData.SendNextChunk(OriginalResponse, maximumChunkSizeInBytes);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryHandleIncomingRequest" Id="{77293447-0bbc-41bf-aa04-008fcf76fafd}">
      <Declaration><![CDATA[METHOD PUBLIC TryHandleIncomingRequest : BOOL
VAR_INPUT
	Request : I_Request;
	Response : I_ServerResponse;
END_VAR
VAR
	responseId : T_MAXSTRING;
	sessionId : T_MAXSTRING;
	sessionData : I_SessionData;
	chunkedResponseData : I_ChunkedResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT config.TryGetResponseIdFromRequest(Request, responseId) THEN
	RETURN;
END_IF

IF NOT config.TryGetSessionIdFromRequest(Request, sessionId) THEN
	RETURN;
END_IF

IF NOT sessionStorage.TryRetreiveSessionDataById(sessionId, responseId, sessionData) THEN
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(sessionData, chunkedResponseData) THEN
	RETURN;
END_IF

IF chunkedResponseData.SizeRemaining > maximumChunkSizeInBytes THEN
	config.UpdateResponseWithHasMoreChunks(Response, responseId);
END_IF

chunkedResponseData.SendNextChunk(Response, maximumChunkSizeInBytes);

IF chunkedResponseData.SendComplete THEN
	sessionStorage.DisposeSessionDataById(sessionId, responseId);
END_IF

TryHandleIncomingRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>