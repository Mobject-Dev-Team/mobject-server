<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Server" Id="{a9bdf641-1b78-46c5-a9de-de65caee5d86}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
{attribute 'TcRpcEnable'}
FUNCTION_BLOCK Server
VAR

	serverConfig : ServerConfigV1;
	requestPayloadStringSizeIncludingNull : UDINT := Constants.REQUEST_PAYLOAD_STRING_SIZE + 1;
	responsePayloadStringSizeIncludingNull : UDINT := Constants.RESPONSE_PAYLOAD_STRING_SIZE + 1;
	
	// the middleware stack allows us to construct our server in any way needed.
	// by default we will support sessions, async polling and chunked requests/
	middlewareStack : MiddlewareStack;
	
	// responseId generation required for pending or chunked data
	sequentialResponseIdGenerator : SequentialResponseIdGenerator;
	
	// ability to support sessions...
	sessionIdGenerator : SequentialSessionIdGenerator;
	sessionManager : SessionManager(sessionIdGenerator, INACTIVE_SESSION_MAX_AGE);
	sessionsMiddleware : SessionsMiddleware(sessionManager, serverConfig);
	
	// ability to suppoort chunked requests
	chunkedRequestsManager : ChunkedRequestsManager(requestPayloadStringSizeIncludingNull, sessionManager, serverConfig);
	chunkedRequestsMiddleware : ChunkedRequestsMiddleware(chunkedRequestsManager);
	
	// ability to support chunked responses
	chunkedResponseManager : ChunkedResponseManager(responsePayloadStringSizeIncludingNull, sessionManager, sequentialResponseIdGenerator, serverConfig);
	chunkedResponsesMiddleware : ChunkedResponsesMiddleware(chunkedResponseManager);
	
	// ability to support pending responses
	pendingResponseManager : PendingResponseManager(sessionManager, sequentialResponseIdGenerator, serverConfig);
	pendingResponseMiddleware : PendingResponseMiddleware(pendingResponseManager);
	
END_VAR
VAR CONSTANT
	INACTIVE_SESSION_MAX_AGE : TIME := T#10S;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{98b65c28-1f8a-4826-823a-2d7bc5de7419}" />
    <Method Name="CyclicCall" Id="{f678d030-3853-4688-aa7c-a36bbb09245a}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sessionManager.CyclicCall();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{6778fec2-a051-4db8-b54a-bd35cdd17727}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MiddlewareStack.Use(sessionsMiddleware);
MiddlewareStack.Use(chunkedRequestsMiddleware);
MiddlewareStack.Use(chunkedResponsesMiddleware);
MiddlewareStack.Use(pendingResponseMiddleware);]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleRequest" Id="{db6b2597-6f8c-4ee7-b696-98db242e2e1d}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD PUBLIC HandleRequest : ResponseData;
VAR_INPUT
	SerializedHeader : STRING(Constants.REQUEST_HEADER_STRING_SIZE);
	SerializedPayload : STRING(Constants.REQUEST_PAYLOAD_STRING_SIZE);
END_VAR
VAR
	header : RequestHeader(SerializedHeader);
	request : Request(header, SerializedPayload);
	serverResponse : ServerResponse(HandleRequest, serverConfig);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[memset(ADR(HandleRequest),0,SIZEOF(HandleRequest));

middlewareStack.Handle(request, serverResponse);

IF NOT serverResponse.HeadersSent THEN
	serverResponse.Error('Unhandled Request');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="SessionCount" Id="{50abdc36-48d8-4c00-82ca-90337c162dd2}">
      <Declaration><![CDATA[PROPERTY PUBLIC SessionCount : DINT]]></Declaration>
      <Get Name="Get" Id="{20da0683-6bc9-4606-b8c6-3e91fc23a7c1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SessionCount := sessionManager.SessionCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Use" Id="{54e2f927-64c4-4b0d-9e0d-731676b77391}">
      <Declaration><![CDATA[METHOD PUBLIC Use
VAR_INPUT
	Middleware : I_Middleware;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[middlewareStack.Use(Middleware);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>