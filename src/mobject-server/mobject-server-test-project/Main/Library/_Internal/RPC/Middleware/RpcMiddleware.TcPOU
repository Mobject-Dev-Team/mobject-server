<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="RpcMiddleware" Id="{75600ee7-b322-40f7-ac68-90f6e7d34ccc}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK RpcMiddleware EXTENDS Middleware
VAR
	rpcHandlers : I_RpcHandlers;
	config : I_RpcMiddlewareConfig;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{9cb44b3e-672e-447f-ba39-2a803ba73b4b}" />
    <Method Name="FB_init" Id="{8a1ec64e-ecfb-455b-ae92-f95bbc82cd55}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	RpcHandlers : I_RpcHandlers;
	Config : I_RpcMiddlewareConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.config := Config;
THIS^.rpcHandlers := RpcHandlers;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Handle" Id="{7b8c3067-5e37-4e1f-9d92-bbf59a32024f}">
      <Declaration><![CDATA[METHOD PUBLIC Handle
VAR_INPUT
	Request : I_Request;
	Response : I_ServerResponse;
END_VAR
VAR
	requestType : T_MAXSTRING;
	contentType : T_MAXSTRING;
	acceptType : T_MAXSTRING;
	methodName : T_MAXSTRING;
	rpcHandler : I_RpcHandler;

	// currently we only support json, however, this can become a factory in the future when used with contentType and acceptType.
	rpcParameters : JsonRpcParameters(ClientRequest := Request);
	rpcResponseBuilder : JsonRpcResponseBuilder(Response);
	rpcReturn : RpcResponse(ServerResponse := Response, ResponseBuilder := rpcResponseBuilder);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT config.TryGetTypeFromRequest(Request, requestType) THEN
	Next(Request, Response);
	RETURN;
END_IF

IF requestType <> 'RPC 1.0' THEN
	Next(Request, Response);
	RETURN;
END_IF

IF NOT(config.TryGetContentTypeFromRequest(Request, contentType)) OR_ELSE NOT(contentType = config.ContentType_Json) THEN
	Response.Error('RPC : Missing or unsupported content type in header');
	RETURN;
END_IF

IF (config.TryGetAcceptResponseFormatFromRequest(Request, acceptType)) AND_THEN NOT(acceptType = config.ContentType_Json) THEN
	Response.Error('RPC : Unsupported accept type in header');
	RETURN;
END_IF

IF NOT config.TryGetMethodNameFromRequest(Request, methodName) THEN
	Response.Error('RPC : Missing RPC method name');
	RETURN;
END_IF

IF NOT rpcHandlers.TryGetByMethodName(methodName, rpcHandler) THEN
	// if not found then we pass it on as there may be other rpc handlers in the middleware stack
	Next(Request, Response);
	RETURN;
END_IF

rpcHandler.Handle(rpcParameters, rpcReturn);

IF NOT Response.HeadersSent THEN
	Response.Error('RPC : Handler did not return a valid response');
	RETURN;
END_IF
// make response async...

]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateConfig" Id="{bd22a84c-6960-4825-8224-512e18394bcd}">
      <Declaration><![CDATA[METHOD PUBLIC UpdateConfig
VAR_INPUT
	Config : I_RpcMiddlewareConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[this^.config := Config;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>