<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SynchronousRpcResponse" Id="{c724498f-baf7-4f00-9137-6c3a66aa5cd0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK SynchronousRpcResponse IMPLEMENTS I_SynchronousRpcResponse
VAR
	serverResponse : I_ServerResponse;
	serializer : I_Serializer;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{12740898-8cc4-4e25-8ce9-9fc0666115c8}" />
    <Folder Name="Private" Id="{dcb37f09-2ecb-4483-9579-8dcbc7918f05}" />
    <Method Name="CompleteWithBase64" Id="{1852c73b-7584-42d8-8595-d755b4b78f03}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithBase64
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddBase64(pBytes, nBytes);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithBool" Id="{7e7403d7-f4cb-400d-8ab9-ff3aedbf57b4}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithBool
VAR_INPUT
	Value : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddBool(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithBytesAsHex" Id="{93903bbf-3c38-4980-8b1f-e2263cdb86e0}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithBytesAsHex
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddBytesAsHex(pBytes, nBytes);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithDateTime" Id="{20014026-b2b6-43a2-93d7-0a69b7b874c8}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithDateTime
VAR_INPUT
	Value : DATE_AND_TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddDateTime(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithDcTime" Id="{601da881-ce92-48c2-b16a-901c433dac2e}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithDcTime
VAR_INPUT
	Value : DCTIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddDcTime(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithDint" Id="{38773dc1-5afc-4fbe-8d85-19dcb6f6dec0}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithDint
VAR_INPUT
	Value : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddDint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithFileTime" Id="{ce3c3570-3dbd-429b-a0df-6122eef0b941}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithFileTime
VAR_INPUT
	Value : FILETIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddFileTime(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithLint" Id="{15fb45be-f8cd-476e-936e-95dd739d2ad8}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithLint
VAR_INPUT
	Value : LINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddLint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithLreal" Id="{a6f94923-7cc9-4772-9c0b-daa067666dd8}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithLreal
VAR_INPUT
	Value : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddLreal(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithNull" Id="{a26a3275-f5d8-4d82-a9fa-28465a681661}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithNull
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddNull();
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithObject" Id="{8c148a58-c3ff-4c45-bfcd-db6bebceaad0}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithObject
VAR_INPUT
	Object : I_Serializable;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
Object.SerializeWith(serializer);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithReal" Id="{c45e6c4a-0553-4bd2-a3cd-0a5b5bd48d1b}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithReal
VAR_INPUT
	Value : REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddReal(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithSerializer" Id="{10656fd7-dd8c-4e2c-a443-082c5750c598}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithSerializer
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SendSuccessResponseUsingSeralizer(Serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithString" Id="{abf0072f-fd49-4976-9966-a04a5b803fee}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithString
VAR_INPUT
	Value : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddString(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithUdint" Id="{859ce20a-da2e-47f5-ba72-c20e7d8c636d}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithUdint
VAR_INPUT
	Value : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddUdint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithUlint" Id="{c6871ed5-3419-4e00-9dd1-9901890cf472}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithUlint
VAR_INPUT
	Value : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddUlint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{58740322-7d24-44d6-95e0-bd81b1ebde4a}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ServerResponse : I_ServerResponse;
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.serverResponse := ServerResponse;
THIS^.serializer := Serializer;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSerializer" Id="{3c95a31f-9472-4fa2-8b38-a78edbb5c949}">
      <Declaration><![CDATA[METHOD PUBLIC GetSerializer : I_Serializer
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetSerializer := serializer.Clone();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeAsynchronous" Id="{e3d7ce72-9753-4130-a9b0-5dfe11ab3e76}">
      <Declaration><![CDATA[METHOD PUBLIC MakeAsynchronous : I_AsynchronousRpcResponse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RejectWithMessage" Id="{d016a36c-5bb1-48bd-ab36-b1534a482e0e}">
      <Declaration><![CDATA[METHOD PUBLIC RejectWithMessage
VAR_INPUT
	Message : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serverResponse.Error(Message);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendSuccessResponseUsingSeralizer" Id="{e0fd64b5-8f20-4205-b67f-95b2daa27c70}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC SendSuccessResponseUsingSeralizer
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	jsonSize : UDINT;
	pJsonString : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[jsonSize := Serializer.GetSeralizedDataLength();

IF jsonSize = 0 THEN
	serverResponse.Success();
END_IF

pJsonString := __NEW(BYTE, jsonSize);

IF NOT Serializer.TryGetSerialziedData(pJsonString, jsonSize) THEN
	serverResponse.Error('RPC Handler unable to get serialized data');
	__DELETE(pJsonString);
	RETURN;
END_IF

serverResponse.SuccessWithPayload(pJsonString, jsonSize);
__DELETE(pJsonString);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>