<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PendingResponseManager" Id="{227d2639-d4f9-47c2-ab56-861a5448ae71}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK PendingResponseManager IMPLEMENTS I_PendingResponseManager
VAR
	sessionStorage : I_SessionStorage;
	responseIdGenerator : I_ResponseIdGenerator;
	config : I_PendingResponseManagerConfig;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{512c79a0-d7ea-4632-8454-ff0bdda61950}" />
    <Folder Name="Private" Id="{10f5e310-740f-44f6-88d4-6719d1d292b2}" />
    <Method Name="CreatePendingResponseData" Id="{9309a56c-b4a3-406f-ba56-d711c30ffecf}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC CreatePendingResponseData : I_PendingResponseData
VAR_INPUT
	RetryDelayInMs : UDINT;
END_VAR
VAR
	pPendingResponseData : POINTER TO PendingResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pPendingResponseData := __NEW(PendingResponseData(SuggestedRetryDelayInMs := RetryDelayInMs));
CreatePendingResponseData := pPendingResponseData^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{10c5352a-129b-4eaa-abe3-146411036763}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	SessionStorage : I_SessionStorage;
	ResponseIdGenerator : I_ResponseIdGenerator;
	Config : I_PendingResponseManagerConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.sessionStorage := SessionStorage;
THIS^.responseIdGenerator := ResponseIdGenerator;
THIS^.config := Config;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCreatePendingResponse" Id="{fab2cba9-29a7-40ae-840c-2912fb9461bb}">
      <Declaration><![CDATA[METHOD PUBLIC TryCreatePendingResponse : BOOL;
VAR_INPUT
	OriginalResponse : I_ServerResponse;
	RetryDelayInMs : UDINT;
	DestinationResponseId : REFERENCE TO T_MAXSTRING;
END_VAR
VAR
	sessionId : T_MAXSTRING;
	responseId : T_MAXSTRING;
	pendingResponseData : I_PendingResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT config.TryGetSessionIdFromResponse(OriginalResponse,sessionId) THEN
	OriginalResponse.Error('Unable to create a pending response without a sessionId');
	RETURN;
END_IF

pendingResponseData := CreatePendingResponseData(RetryDelayInMs);
responseId := responseIdGenerator.Generate();

IF NOT sessionStorage.TryStoreSessionDataById(sessionId, responseId, pendingResponseData) THEN
	OriginalResponse.Error('Unable to store pending response');
	pendingResponseData.Dispose();
	RETURN;
END_IF

OriginalResponse.Pending(responseId, RetryDelayInMs);
DestinationResponseId := responseId;
TryCreatePendingResponse := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryHandleIncomingRequest" Id="{5dd32684-e554-429c-8b1d-ad94c31a0043}">
      <Declaration><![CDATA[METHOD PUBLIC TryHandleIncomingRequest : BOOL
VAR_INPUT
	Request : I_Request;
	Response : I_ServerResponse;
END_VAR
VAR
	responseId : T_MAXSTRING;
	sessionId : T_MAXSTRING;
	sessionData : I_SessionData;
	pendingResponseData : I_PendingResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT config.TryGetResponseIdFromRequest(Request, responseId) THEN
	RETURN;
END_IF

IF NOT config.TryGetSessionIdFromRequest(Request, sessionId) THEN
	RETURN;
END_IF

IF NOT sessionStorage.TryRetreiveSessionDataById(sessionId, responseId, sessionData) THEN
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(sessionData, pendingResponseData) THEN
	RETURN;
END_IF

IF pendingResponseData.IsPending THEN
	Response.Pending(responseId, pendingResponseData.SuggestedRetryDelayInMs);
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT pendingResponseData.TryUpdateServerResponse(Response) THEN	
	Response.Error('Unable to update server response with pending data');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

sessionStorage.DisposeSessionDataById(sessionId, responseId);
TryHandleIncomingRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>