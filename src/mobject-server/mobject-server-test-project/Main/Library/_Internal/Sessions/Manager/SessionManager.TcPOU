<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SessionManager" Id="{90fd976c-1ca7-4040-ad52-5f45d1d6b3c4}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK SessionManager implements I_SessionManager, I_SessionStorage
VAR
	activeSessions : Dictionary;
	sessionIdGenerator : I_SessionIdGenerator;
	currentStorageId : UDINT;
	sessionMaxLife : TIME;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{7dc71ecd-1e2e-4054-be7b-88439bd7a055}" />
    <Folder Name="Destructor" Id="{955b78d7-748c-465a-8ef1-8ade3a09e309}" />
    <Folder Name="Private" Id="{0e592bc1-44ed-4d2b-bc39-bf9cda67de39}" />
    <Method Name="CheckForExpiredSessions" Id="{ed802867-966f-4b09-bf99-0d8bc76df646}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC CheckForExpiredSessions
VAR_INPUT
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	session : I_Session;
	expiredSessions : Stack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := activeSessions.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(session) THEN
		IF session.LastAccessedTimestamp.IsDurationElapsed(sessionMaxLife) THEN
			expiredSessions.Push(session);
		END_IF
	END_IF
END_WHILE

enumerator.Dispose();

WHILE expiredSessions.TryPop(session) DO
	DisposeSession(session.Id);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateNewSession" Id="{8f73492b-d285-4067-945e-51553f07c17c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateNewSession : I_Session
VAR
	id : T_MAXSTRING;
	pSession : POINTER TO Session;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[id := sessionIdGenerator.Generate();
pSession := __NEW(Session(SessionId := id));
CreateNewSession := pSession^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateSession" Id="{ae54ac8f-e99b-4edc-a710-65a4bc03a4b0}">
      <Declaration><![CDATA[METHOD PUBLIC CreateSession : T_MAXSTRING;
VAR
	session : I_Session;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[session := CreateNewSession();
activeSessions.AddOrUpdate(session.Id, session);
CreateSession := session.Id;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicCall" Id="{adca83ea-788a-4205-a0b0-cc70c54d65e7}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckForExpiredSessions();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeAllSessions" Id="{b0328bcc-a2a7-45fb-bb30-b127df358c87}">
      <Declaration><![CDATA[METHOD PUBLIC DisposeAllSessions
VAR_INPUT
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	session : I_Session;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := activeSessions.GetEnumerator();

WHILE enumerator.MoveNext() DO
	if enumerator.TryGet(session) then
		session.Dispose();
	END_IF
END_WHILE

enumerator.Dispose();
activeSessions.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSession" Id="{1f8b0e18-85fa-48f8-b1fa-f14505dc3153}">
      <Declaration><![CDATA[METHOD PUBLIC DisposeSession
VAR_INPUT
	Id : T_MAXSTRING;
END_VAR
VAR
	session : I_Session;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT activeSessions.TryGetValue(Id, session) THEN
	RETURN;
END_IF

session.Dispose();
activeSessions.Remove(Id);]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSessionDataById" Id="{1ad28fbf-1f29-4da3-a785-67b66326e540}">
      <Declaration><![CDATA[METHOD PUBLIC DisposeSessionDataById
VAR_INPUT
	SessionId : T_MAXSTRING;
	StorageId : T_MAXSTRING;
END_VAR
VAR
	session : I_Session;
	sessionData : I_SessionData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF StorageId = '' THEN 
	RETURN;
END_IF

IF NOT activeSessions.TryGetValue(SessionId, session) THEN
	RETURN;
END_IF

IF NOT session.TryGetDataFromStorage(StorageId, sessionData) THEN
	RETURN;
END_IF

session.DisposeDataFromStorage(StorageId);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{43f8357b-dbc8-4eff-8238-652c04179c2b}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeAllSessions();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{fe268b30-f722-40e5-921d-eba5791b3d9f}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	SessionIdGenerator : I_SessionIdGenerator;
	SessionMaxLife : TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.sessionIdGenerator := SessionIdGenerator;
THIS^.sessionMaxLife := SessionMaxLife;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsValidSession" Id="{31c4bdcd-d6c8-444d-8b15-ff5226cc4a5a}">
      <Declaration><![CDATA[METHOD PUBLIC IsValidSession : BOOL
VAR_INPUT
	Id : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsValidSession := activeSessions.ContainsKey(Id);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RefreshSession" Id="{ba74039d-cb1a-46ec-9447-1cb827354273}">
      <Declaration><![CDATA[METHOD PUBLIC RefreshSession
VAR_INPUT
	Id : T_MAXSTRING;
END_VAR
VAR
	session : I_Session;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT activeSessions.TryGetValue(Id, session) THEN
	RETURN;
END_IF

session.Refresh();]]></ST>
      </Implementation>
    </Method>
    <Property Name="SessionCount" Id="{3649ded8-410b-44c9-babc-17c1bc3784d7}">
      <Declaration><![CDATA[PROPERTY PUBLIC SessionCount : DINT]]></Declaration>
      <Get Name="Get" Id="{a30c1e41-1077-4bd5-b1bb-dbf3345d9355}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SessionCount := activeSessions.Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryRetreiveSessionDataById" Id="{0fb427b1-5ae2-4f38-94c9-bdd72a673e66}">
      <Declaration><![CDATA[METHOD PUBLIC TryRetreiveSessionDataById : BOOL
VAR_INPUT
	SessionId : T_MAXSTRING;
	StorageId : T_MAXSTRING;
	Destination : REFERENCE TO I_SessionData;
END_VAR
VAR
	session : I_Session;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT activeSessions.TryGetValue(SessionId, session) THEN
	RETURN;
END_IF

TryRetreiveSessionDataById := session.TryGetDataFromStorage(StorageId, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryStoreSessionDataById" Id="{23603274-63a2-4b38-b5eb-0241b0d13401}">
      <Declaration><![CDATA[METHOD PUBLIC TryStoreSessionDataById : BOOL
VAR_INPUT
	SessionId : T_MAXSTRING;
	StorageId : T_MAXSTRING;
	Source : I_SessionData;
END_VAR
VAR
	session : I_Session;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF StorageId = '' THEN 
	RETURN;
END_IF

IF NOT activeSessions.TryGetValue(SessionId, session) THEN
	RETURN;
END_IF

session.AddOrUpdateStorage(StorageId, Source);
TryStoreSessionDataById := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>