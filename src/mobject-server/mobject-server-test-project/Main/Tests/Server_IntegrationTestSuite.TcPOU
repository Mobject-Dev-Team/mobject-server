<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Server_IntegrationTestSuite" Id="{cdfabd45-d3f9-4657-b5eb-78ded2b6a8d3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Server_IntegrationTestSuite EXTENDS TcUnit.FB_TestSuite
VAR
	// variables for TestAsyncEchoRpcCallAndResponse
	testAsyncEchoRpcCallAndResponseSetup : BOOL;
	testAsyncEchoRpcCallAndResponseServer : RpcServer;
	testAsyncEchoRpcCallAndResponseAsyncEchoRpcHandler : SyncToAsyncEchoRpcHandler;
	testAsyncEchoRpcCallAndResponseOutput : ResponseData;
	
	// variables for TestConcatRpcCallAndResponse
	testConcatRpcCallAndResponseOutput : ResponseData;
	
	// variables for TestAsyncConcatRpcCallAndResponse
	testAsyncConcatRpcCallAndResponseOutput : ResponseData;
	
	// variables for TestAsyncRejectMessage
	testAsyncRejectMessageOutput : ResponseData;
	
	// variables for TestSyncRejectMessage
	testSyncRejectMessageOutput : ResponseData;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestSyncToAsyncEchoRpcCallAndResponse();
TestConcatRpcCallAndResponse();
TestConcatRpcCallAndResponseWithChunkedRequest();
TestAsyncConcatRpcCallAndResponse();
TestAsyncRejectMessage();
TestSyncRejectMessage();]]></ST>
    </Implementation>
    <Method Name="TestAsyncConcatRpcCallAndResponse" Id="{3ebcb01b-3f02-4f13-b0d6-0a1300d01a9a}">
      <Declaration><![CDATA[METHOD TestAsyncConcatRpcCallAndResponse
VAR
	server : RpcServer;
	asyncConcatStringRpcHandler : AsyncConcatStringRpcHandler;
	header : T_MAXSTRING := '{"Type":"RPC 1.0","Method-Name":"concat","Content-Type":"application/json"}';
    payload : T_MAXSTRING := '{"STR1":"hello", "STR2":"world"}';
	followupHeader : T_MAXSTRING := '{"Type":"RPC 1.0","Accept":"application/json","Method-Name":"asyncEcho","Response-Id":"1","Session-Id":"1"}';
	followupPayload : T_MAXSTRING := '';
	expected : T_MAXSTRING := '"helloworld"';
	actual : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAsyncConcatRpcCallAndResponse');

server.RegisterAsynchronousRpcHandler('concat',asyncConcatStringRpcHandler);

testAsyncConcatRpcCallAndResponseOutput := server.HandleRequest(header,payload);
server.CyclicCall();
testAsyncConcatRpcCallAndResponseOutput := server.HandleRequest(followupHeader, followupPayload);
actual := testAsyncConcatRpcCallAndResponseOutput.Payload;

AssertEquals(
	Expected := expected, 
	Actual := actual,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAsyncRejectMessage" Id="{64e4932a-5d9d-48db-ae04-33e9d08fcebc}">
      <Declaration><![CDATA[METHOD TestAsyncRejectMessage
VAR
	server : RpcServer;
	rejectWithMessageAsyncHandler : RejectWithMessageAsyncHandler;
	header : T_MAXSTRING := '{"Type":"RPC 1.0","Method-Name":"reject","Content-Type":"application/json"}';
    payload : T_MAXSTRING := '';
	followupHeader : T_MAXSTRING := '{"Response-Id":"1","Session-Id":"1"}';
	followupPayload : T_MAXSTRING := '';
	expectedFirstReply : T_MAXSTRING := '{"Session-Id":"1","Status":"Pending","Response-Id":"1"}';
	expectedSecondReply : T_MAXSTRING := '{"Session-Id":"1","Status":"Error","Message":"This is the reject message"}';
	actual : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAsyncRejectMessage');

server.RegisterAsynchronousRpcHandler('reject',rejectWithMessageAsyncHandler);

testAsyncRejectMessageOutput := server.HandleRequest(header,payload);
actual := testAsyncRejectMessageOutput.Header;

AssertEquals(
	Expected := expectedFirstReply, 
	Actual := actual,
	Message := 'Did not reply that the request was being processed'
);

server.CyclicCall();


testAsyncRejectMessageOutput := server.HandleRequest(followupHeader,followupPayload);
actual := testAsyncRejectMessageOutput.Header;


AssertEquals(
	Expected := expectedSecondReply, 
	Actual := actual,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestConcatRpcCallAndResponse" Id="{98853763-3f92-414f-a8ce-839282bd98fd}">
      <Declaration><![CDATA[METHOD TestConcatRpcCallAndResponse
VAR
	server : RpcServer;
	concatStringRpcHandler : ConcatStringRpcHandler;
	header : T_MAXSTRING := '{"Type":"RPC 1.0","Method-Name":"concat","Content-Type":"application/json"}';
    payload : T_MAXSTRING := '{"STR1":"hello", "STR2":"world"}';
	expected : T_MAXSTRING := '"helloworld"';
	actual : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestConcatRpcCallAndResponse');

server.RegisterSynchronousRpcHandler('concat',concatStringRpcHandler);

testConcatRpcCallAndResponseOutput := server.HandleRequest(header,payload);
actual := testConcatRpcCallAndResponseOutput.Payload;

AssertEquals(
	Expected := expected, 
	Actual := actual,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestConcatRpcCallAndResponseWithChunkedRequest" Id="{071fb0ea-7b30-4b8e-af98-330bf3ca9442}">
      <Declaration><![CDATA[METHOD TestConcatRpcCallAndResponseWithChunkedRequest
VAR
	server : RpcServer;
	concatStringRpcHandler : ConcatStringRpcHandler;
	chunk1Header : T_MAXSTRING := '{"Type":"RPC 1.0","Method-Name":"concat","Request-Id":"abc","Has-More-Chunks":true, "Chunk-Sequence":1, "Chunk-Total":2, "Content-Type":"application/json"}';
    chunk1payload : T_MAXSTRING := '{"STR1":"hello",';
	chunk2Header : T_MAXSTRING := '{"Type":"RPC 1.0","Session-Id":"1","Method-Name":"concat","Request-Id":"abc","Has-More-Chunks":false, "Chunk-Sequence":2, "Chunk-Total":2, "Content-Type":"application/json"}';
    chunk2payload : T_MAXSTRING := ' "STR2":"world"}';
	expected : T_MAXSTRING := '"helloworld"';
	out : ResponseData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//TEST('TestConcatRpcCallAndResponseWithChunkedRequest');

//server.RegisterRpcHandler('concat',concatStringRpcHandler);

//out := server.HandleRequest(chunk1Header,chunk1payload);
//out := server.HandleRequest(chunk2Header,chunk2payload);

//AssertTrue(
//	Condition := expected = out.Payload,
//	Message := 'Did not produce the expected result'
//);

//TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSyncRejectMessage" Id="{c2d41257-7d05-4c12-8fc5-b0b2729e9e29}">
      <Declaration><![CDATA[METHOD TestSyncRejectMessage
VAR
	server : RpcServer;
	rejectWithMessageSyncHandler : RejectWithMessageSyncHandler;
	header : T_MAXSTRING := '{"Type":"RPC 1.0","Method-Name":"reject","Content-Type":"application/json"}';
    payload : T_MAXSTRING := '';
	expected : T_MAXSTRING := '{"Session-Id":"1","Status":"Error","Message":"This is the reject message"}';
	actual : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSyncRejectMessage');

server.RegisterSynchronousRpcHandler('reject',rejectWithMessageSyncHandler);

testSyncRejectMessageOutput := server.HandleRequest(header,payload);
actual := testAsyncRejectMessageOutput.Header;

AssertEquals(
	Expected := expected, 
	Actual := actual,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSyncToAsyncEchoRpcCallAndResponse" Id="{73b639ff-8394-44c2-a577-ad68a5ad6e49}">
      <Declaration><![CDATA[METHOD TestSyncToAsyncEchoRpcCallAndResponse
VAR
	header : T_MAXSTRING := '{"Type":"RPC 1.0","Accept":"application/json","Method-Name":"asyncEcho","Content-Type":"application/json"}';
    payload : T_MAXSTRING := '{"Echo":"hello"}';
	followupHeader : T_MAXSTRING := '{"Type":"RPC 1.0","Accept":"application/json","Method-Name":"asyncEcho","Response-Id":"1","Session-Id":"1"}';
	followuPayload : T_MAXSTRING := '{"Echo":"hello"}';
	expected : T_MAXSTRING := '"hello"';
	actual : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAsyncEchoRpcCallAndResponse');

IF NOT testAsyncEchoRpcCallAndResponseSetup THEN
	testAsyncEchoRpcCallAndResponseServer.RegisterSynchronousRpcHandler('asyncEcho',testAsyncEchoRpcCallAndResponseAsyncEchoRpcHandler);
	testAsyncEchoRpcCallAndResponseOutput := testAsyncEchoRpcCallAndResponseServer.HandleRequest(header,payload);
	testAsyncEchoRpcCallAndResponseSetup := TRUE;	
END_IF

testAsyncEchoRpcCallAndResponseAsyncEchoRpcHandler.CyclicCall();

IF testAsyncEchoRpcCallAndResponseAsyncEchoRpcHandler.Busy THEN
	RETURN;
END_IF

testAsyncEchoRpcCallAndResponseOutput := testAsyncEchoRpcCallAndResponseServer.HandleRequest(followupHeader,followuPayload);
actual := testAsyncEchoRpcCallAndResponseOutput.Payload;

AssertEquals(
	Expected := expected, 
	Actual := actual,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>