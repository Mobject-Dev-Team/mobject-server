<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SynchronousRpcResponse" Id="{c3ba7e65-8591-0ab0-0758-ff428caf89f5}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK SynchronousRpcResponse IMPLEMENTS I_SynchronousRpcResponse
VAR
	serverResponse : I_ServerResponse;
	serializer : I_Serializer;
	asynchronousRpcResponseFactory : I_AsynchronousRpcResponseFactory;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{e8529cd4-af14-0900-2b02-9ba8ad1cf5cd}" />
    <Folder Name="Destructor" Id="{90cae5bf-bb80-07dc-0f8e-d301d0d7f811}" />
    <Folder Name="Protected" Id="{70b8d58d-9fad-0242-1c82-391911e892a4}" />
    <Method Name="CompleteWithBase64" Id="{254c4a04-919e-06e0-0ea6-6f66c1abe766}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithBase64
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddBase64(pBytes, nBytes);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithBool" Id="{275a39c3-c886-0179-3d39-481b35a08455}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithBool
VAR_INPUT
	Value : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddBool(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithBytesAsHex" Id="{d5fc954e-af85-073e-1db4-da9d0139609a}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithBytesAsHex
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddBytesAsHex(pBytes, nBytes);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithDateTime" Id="{7fa9add0-776a-0228-1124-1afb50e77c6c}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithDateTime
VAR_INPUT
	Value : DATE_AND_TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddDateTime(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithDcTime" Id="{4951fdeb-f394-00fb-29b2-ddfe31f49312}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithDcTime
VAR_INPUT
	Value : DCTIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddDcTime(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithDint" Id="{33eed768-ee53-02ae-100d-06de58606567}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithDint
VAR_INPUT
	Value : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddDint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithFileTime" Id="{4836e783-69a6-05e6-2a8f-ed2996b65cae}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithFileTime
VAR_INPUT
	Value : FILETIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddFileTime(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithLint" Id="{ea5247b4-9da7-0b1f-12e1-409d3cbfc75b}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithLint
VAR_INPUT
	Value : LINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddLint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithLreal" Id="{90865d54-f8be-0376-0b67-24a384c5d070}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithLreal
VAR_INPUT
	Value : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddLreal(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithNull" Id="{695b9098-0cca-039e-1c74-b4fb68ab633a}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithNull
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddNull();
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithObject" Id="{d6e35a6e-f423-0274-1d88-b32034fbdaef}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithObject
VAR_INPUT
	Object : I_Serializable;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
Object.SerializeWith(serializer);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithReal" Id="{d3c51c51-c6d6-070a-3dec-40df34d082e9}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithReal
VAR_INPUT
	Value : REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddReal(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithSerializer" Id="{2d20ea19-ee98-097e-24be-241f3a4e4939}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithSerializer
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SendSuccessResponseUsingSeralizer(Serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithString" Id="{ba41f584-30d4-0bcd-3868-3bbc459f06ce}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithString
VAR_INPUT
	Value : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddString(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithUdint" Id="{c3452bfb-ba0b-021e-3bfa-007cfea93aff}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithUdint
VAR_INPUT
	Value : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddUdint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteWithUlint" Id="{69ab2302-c674-0516-3d25-1deb0bd66bd2}">
      <Declaration><![CDATA[METHOD PUBLIC CompleteWithUlint
VAR_INPUT
	Value : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serializer.Reset();
serializer.AddUlint(Value);
SendSuccessResponseUsingSeralizer(serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{b22ebadf-8e36-0ffe-0376-32066e6a67ac}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

serializer.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ca7917ec-0bad-08c9-06a6-039fe5e6b772}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ServerResponse : I_ServerResponse;
	Serializer : I_Serializer;
	AsynchronousRpcResponseFactory : I_AsynchronousRpcResponseFactory;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.serverResponse := ServerResponse;
THIS^.serializer := Serializer.Clone();
THIS^.asynchronousRpcResponseFactory := AsynchronousRpcResponseFactory;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSerializer" Id="{7cdc9c64-65d0-06aa-09f5-6fe47339ff43}">
      <Declaration><![CDATA[METHOD PUBLIC GetSerializer : I_Serializer
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetSerializer := serializer.Clone();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RejectWithMessage" Id="{85770cc9-ea5e-0835-3468-a7f22704beed}">
      <Declaration><![CDATA[METHOD PUBLIC RejectWithMessage
VAR_INPUT
	Message : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[serverResponse.Error(Message);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendSuccessResponseUsingSeralizer" Id="{d48b560a-6ca1-085c-0af3-0608e8d24229}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SendSuccessResponseUsingSeralizer
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	jsonSize : UDINT;
	pJsonString : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[jsonSize := Serializer.GetSeralizedDataLength();

IF jsonSize = 0 THEN
	serverResponse.Success();
END_IF

pJsonString := __NEW(BYTE, jsonSize);

IF NOT Serializer.TryGetSerialziedData(pJsonString, jsonSize) THEN
	serverResponse.Error('RPC Handler unable to get serialized data');
	__DELETE(pJsonString);
	RETURN;
END_IF

serverResponse.SuccessWithPayload(pJsonString, jsonSize);
__DELETE(pJsonString);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeAsynchronous" Id="{0beb8721-c9c3-0d3a-0ce8-bbb995e19d8b}">
      <Declaration><![CDATA[METHOD PUBLIC TryMakeAsynchronous : BOOL
VAR_INPUT
	Destination : REFERENCE TO I_AsynchronousRpcResponse;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryMakeAsynchronous := asynchronousRpcResponseFactory.TryCreate(Destination);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>