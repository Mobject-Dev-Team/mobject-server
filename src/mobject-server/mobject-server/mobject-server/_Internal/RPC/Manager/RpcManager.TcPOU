<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="RpcManager" Id="{308b5439-3f52-0c22-3a38-2a4336aefe7b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RpcManager IMPLEMENTS I_RpcManager
VAR
	rpcHandlers : I_RpcHandlers;
	asyncResponseManager : I_AsyncResponseManager;
	headerAccessor : I_RpcHeaderAccessor;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{0ade8a4f-3476-019d-0aba-82e2bb43a90e}" />
    <Method Name="FB_init" Id="{02d294c0-1ef3-0764-007b-c1c7ca225b00}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	RpcHandlers : I_RpcHandlers;
	AsyncResponseManager : I_AsyncResponseManager;
	HeaderAccessor : I_RpcHeaderAccessor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.rpcHandlers := RpcHandlers;
THIS^.asyncResponseManager := AsyncResponseManager;
THIS^.headerAccessor := HeaderAccessor;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryHandleIncomingRequest" Id="{b9b37eb6-3223-0f27-2d3b-8d09875b1965}">
      <Declaration><![CDATA[METHOD PUBLIC TryHandleIncomingRequest : BOOL
VAR_INPUT
	Request : I_Request;
	Response : I_ServerResponse;
END_VAR
VAR
	requestType : T_MAXSTRING;
	contentType : T_MAXSTRING;
	acceptType : T_MAXSTRING;
	methodName : T_MAXSTRING;
	rpcHandler : I_RpcHandler;

	// currently we only support json, however, this can become a factory in the future when used with contentType and acceptType.
	rpcParameters : JsonRpcParameters(ClientRequest := Request);
	jsonSerializer : JsonSerializer;
	asyncRpcResponseFactory : AsynchronousRpcResponseFactory(ServerResponse := Response, Serializer := jsonSerializer, AsyncResponseManager := THIS^.asyncResponseManager);
	rpcSynchronousResponse : SynchronousRpcResponse(ServerResponse := Response, Serializer := jsonSerializer, AsynchronousRpcResponseFactory := asyncRpcResponseFactory);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT headerAccessor.TryGetTypeFromRequest(Request, requestType) THEN
	RETURN;
END_IF

IF requestType <> 'RPC 1.0' THEN
	RETURN;
END_IF

IF NOT(headerAccessor.TryGetContentTypeFromRequest(Request, contentType)) OR_ELSE NOT(contentType = headerAccessor.ContentType_Json) THEN
	Response.Error('RPC : Missing or unsupported content type in header');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF (headerAccessor.TryGetAcceptResponseFormatFromRequest(Request, acceptType)) AND_THEN NOT(acceptType = headerAccessor.ContentType_Json) THEN
	Response.Error('RPC : Unsupported accept type in header');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT headerAccessor.TryGetMethodNameFromRequest(Request, methodName) THEN
	Response.Error('RPC : Missing RPC method name');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT rpcHandlers.TryGetByMethodName(methodName, rpcHandler) THEN
	RETURN;
END_IF

rpcHandler.Handle(rpcParameters, rpcSynchronousResponse);

IF NOT Response.HeadersSent THEN
	Response.Error('RPC : Handler did not return a valid response');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

TryHandleIncomingRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>