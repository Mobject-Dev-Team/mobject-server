<div id="Desktop" data-tchmi-type="TcHmi.Controls.System.TcHmiView" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width-mode="Content" data-tchmi-min-width="100" data-tchmi-min-width-unit="%" data-tchmi-height-mode="Content" data-tchmi-min-height="100" data-tchmi-min-height-unit="%">
  <div id="ViewDesktopBeckhoffLogo" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiImage" data-tchmi-src="Images/Beckhoff_Logo.svg" data-tchmi-left="20" data-tchmi-top="20" data-tchmi-width="194" data-tchmi-height="57">

  </div>
  <div id="TcHmiHtmlHost" data-tchmi-type="TcHmi.Controls.System.TcHmiHtmlHost" data-tchmi-height="300" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-top="87" data-tchmi-top-unit="px" data-tchmi-width="300" data-tchmi-width-unit="px">

      <style>
          .button-container div {
              margin-bottom: 10px; /* Adjust the space as needed */
          }
      </style>

      <div class="button-container">
          <div><button id="testConcat64kbPayload">Test Concat with 64kb Payload</button></div>
          <div><button id="testConcat5mbPayload">Test Concat with 5mb Payload</button></div>
          <div><button id="testConcat">Test Concat</button></div>
          <div><button id="testAsyncEcho">Test Async Echo</button></div>
      </div>

      <script>

        // Creating a new TcHmiAsyncClient instance
        const client = new TcHmiAsyncClient('%s%PLC1.MAIN.server.HandleRequest%/s%');

        /**
         * Function to call concat with payload
         * @param {Object} payload - The payload for the RPC call
         */
        async function callConcatRpcWithPayload(payload) {
            console.time('Duration, concat with payload');
            try {
                const response = await client.rpcCall('concat', payload);
                console.log('Response:', response);
            } catch (error) {
                console.error('Error:', error);
            } finally {
                console.timeEnd('Duration, concat with payload');
            }
        }

        /**
         * Function to call concat with inline object
         */
        async function callConcatRpc() {
            console.time('Duration, concat');
            try {
                const response = await client.rpcCall('concat', { STR1: 'foo', STR2: 'bar' });
                console.log('Response:', response);
            } catch (error) {
                console.error('Error:', error);
            } finally {
                console.timeEnd('Duration, concat');
            }
        }

        /**
         * Function to call asyncConcat with inline object
         */
        async function callAsyncEchoRpc() {
            console.time('Duration, async echo');
            try {
                const response = await client.rpcCall('asyncEcho', { Echo: 'hello'});
                console.log('Response:', response);
            } catch (error) {
                console.error('Error:', error);
            } finally {
                console.timeEnd('Duration, async echo');
            }
        }

        /**
         * Fetches data from a JSON file and calls RPC with the payload
         * @param {string} path - The path to the JSON file
         */
        async function fetchAndCallConcatRpcWithPayload(path) {
            try {
                const response = await fetch(path);
                const data = await response.json();
                await callConcatRpcWithPayload(data);
            } catch (error) {
                console.error('Error loading JSON:', error);
            }
        }

        document.getElementById('testConcat64kbPayload').addEventListener('click', async () => {
            await fetchAndCallConcatRpcWithPayload('./Imports/payload64kb.json');
        });

        document.getElementById('testConcat5mbPayload').addEventListener('click', async () => {
            await fetchAndCallConcatRpcWithPayload('./Imports/payload5Mb.json');
        });

        document.getElementById('testConcat').addEventListener('click', async () => {
            await callConcatRpc();
        });

        document.getElementById('testAsyncEcho').addEventListener('click', async () => {
            await callAsyncEchoRpc();
        });

      </script>
  </div>
</div>