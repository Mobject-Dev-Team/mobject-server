<div id="Desktop" data-tchmi-type="TcHmi.Controls.System.TcHmiView" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width-mode="Content" data-tchmi-min-width="100" data-tchmi-min-width-unit="%" data-tchmi-height-mode="Content" data-tchmi-min-height="100" data-tchmi-min-height-unit="%">
  <div id="ViewDesktopBeckhoffLogo" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiImage" data-tchmi-src="Images/Beckhoff_Logo.svg" data-tchmi-left="20" data-tchmi-top="20" data-tchmi-width="194" data-tchmi-height="57">

  </div>
  <div id="TcHmiHtmlHost" data-tchmi-type="TcHmi.Controls.System.TcHmiHtmlHost" data-tchmi-height="300" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-top="87" data-tchmi-top-unit="px" data-tchmi-width="300" data-tchmi-width-unit="px">
      <script>

        /* To use the mobject-client in your TwinCAT HMI project, follow these steps.
        1. Copy mobject-client.js located in the Scripts folder to your project
        2. Add an instance of RpcServer to your PLC program (in this example we'll add it as MAIN.server)
        3. Register the example ConcatStringRpcHandler with the server (instructions found in the documentation)
        3. Using TwinCAT HMI server configuration, map the HandleRequest method of Main.server.  This will map as %s%PLC1.MAIN.server.HandleRequest%/s%
        4. Add the following code to Desktop.view in a script tag. 

        // Creating a new RpcClient instance
        const client = new TcHmiRpcClient('%s%PLC1.MAIN.server.HandleRequest%/s%');

        // call the rpc and console log the response
        client.rpcCall('concat', { STR1: 'foo', STR2: 'bar' })
            .then(response => {
                console.log(response);
            })
            .catch(error => {
                console.error('Error:', error);
            });

        */

      </script>

      <style>
          .button-container div {
              margin-bottom: 10px; /* Adjust the space as needed */
          }
      </style>

      <div class="button-container">
          <div><button id="testConcat64kbPayload">Test Concat with 64kb Payload</button></div>
          <div><button id="testConcat5mbPayload">Test Concat with 5mb Payload</button></div>
          <div><button id="testConcat">Test Concat</button></div>
          <div><button id="testAsyncEcho">Test Async Echo</button></div>
          <div><button id="testAdjustableSizeReply">Test Adjustable Size Reply with 200kb return</button></div>
      </div>

      <script>

        // Creating a new RpcClient instance
        const client = new TcHmiRpcClient('%s%PLC1.MAIN.server.HandleRequest%/s%');

        /**
         * Function to call concat with payload
         * @param {Object} payload - The payload for the RPC call
         */
        async function callConcatRpcWithPayload(payload) {
            console.time('Duration, concat with payload');
            try {
                console.log('RPC Call Started');
                const response = await client.rpcCall('concat', payload);
                console.log('RPC Call Final Reply:', response);
            } catch (error) {
                console.error('RPC Call Error:', error);
            } finally {
                console.timeEnd('Duration, concat with payload');
            }
        }

        /**
         * Function to call concat with inline object
         */
        async function callConcatRpc() {
            console.time('Duration, concat');
            try {
                console.log('RPC Call Started');
                const response = await client.rpcCall('concat', { STR1: 'foo', STR2: 'bar' });
                console.log('RPC Call Final Reply:', response);
            } catch (error) {
                console.error('RPC Call Error:', error);
            } finally {
                console.timeEnd('Duration, concat');
            }
        }

        /**
         * Function to call asyncEcho with inline object
         */
        async function callAsyncEchoRpc() {
            console.time('Duration, async echo');
            try {
                console.log('RPC Call Started');
                const response = await client.rpcCall('asyncEcho', { Echo: 'hello'});
                console.log('RPC Call Final Reply:', response);
            } catch (error) {
                console.error('RPC Call Error:', error);
            } finally {
                console.timeEnd('Duration, async echo');
            }
        }

        /**
        * Function to call asyncEcho with payload
        */
        async function callAdjustableSizeReplyRpc(size) {
            console.time('Duration, adjustable size reply');
            try {
                console.log('RPC Call Started');
                const response = await client.rpcCall('adjustableSizeReply', { Size: size});
                console.log('RPC Call Final Reply:', response);
            } catch (error) {
                console.error('RPC Call Error:', error);
            } finally {
                console.timeEnd('Duration, adjustable size reply');
            }
        }

        async function fetchAndCallConcatRpcWithPayload(path) {
            try {
                const response = await fetch(path);
                const data = await response.json();
                await callConcatRpcWithPayload(data);
            } catch (error) {
                console.error('Error loading JSON:', error);
            }
        }

        function createStringOfAs(byteSize) {
            return 'a'.repeat(byteSize);
        }

        document.getElementById('testConcat64kbPayload').addEventListener('click', async () => {
            await fetchAndCallConcatRpcWithPayload('./Imports/payload64kb.json');
        });

        document.getElementById('testConcat5mbPayload').addEventListener('click', async () => {
            await fetchAndCallConcatRpcWithPayload('./Imports/payload5Mb.json');
        });

        document.getElementById('testConcat').addEventListener('click', async () => {
            await callConcatRpc();
        });

        document.getElementById('testAsyncEcho').addEventListener('click', async () => {
            await callAsyncEchoRpc();
        });

        document.getElementById('testAdjustableSizeReply').addEventListener('click', async () => {
            await callAdjustableSizeReplyRpc(100000);
        });

      </script>
  </div>
</div>