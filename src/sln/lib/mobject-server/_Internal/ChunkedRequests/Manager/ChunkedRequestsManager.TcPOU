<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="ChunkedRequestsManager" Id="{bef17b1e-f08c-038f-0967-ac86d11b34a0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ChunkedRequestsManager IMPLEMENTS I_ChunkedRequestsManager
VAR
	maximumChunkSizeInBytes : UDINT;
	sessionStorage : I_SessionStorage;
	headerAccessor : I_ChunkedRequestsHeaderAccessor;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{bd276c64-17f4-006d-2b3f-afc7cfd8e428}" />
    <Folder Name="Private" Id="{271e6c5c-e05f-0c08-12ca-066b6ba638fe}" />
    <Method Name="CreateChunkedRequestData" Id="{a50e120f-c8b0-0d41-0de7-4150a954a52c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateChunkedRequestData : I_ChunkedRequestData
VAR_INPUT
	RequestChunkSizeInBytes : UDINT;
	RequestChunkCount : UDINT;
END_VAR
VAR
	pChunkedRequestData : POINTER TO ChunkedRequestData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pChunkedRequestData := __NEW(ChunkedRequestData(ChunkSizeInBytes := RequestChunkSizeInBytes, ChunkCount := RequestChunkCount));
CreateChunkedRequestData := pChunkedRequestData^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{0a682574-0a32-013a-208c-3c7782118409}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	MaximumChunkSizeInBytes : UDINT;
	SessionStorage : I_SessionStorage;
	HeaderAccessor : I_ChunkedRequestsHeaderAccessor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.maximumChunkSizeInBytes := MaximumChunkSizeInBytes;
THIS^.sessionStorage := SessionStorage;
THIS^.headerAccessor := HeaderAccessor;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryHandleIncomingRequest" Id="{e219e0ee-3aeb-03d3-2229-613667eb092c}">
      <Declaration><![CDATA[METHOD PUBLIC TryHandleIncomingRequest : BOOL
VAR_INPUT
	Request : I_Request;
	Response : I_ServerResponse;
	NextMidleware : I_Middleware;
END_VAR
VAR 
	hasChunkSequenceHeader : BOOL;
	chunkSequence : DINT;
	hasChunkTotalHeader : BOOL;
	chunkTotal : DINT;
	hasMoreChunksHeader : BOOL;
	hasMoreChunks : BOOL;
	requestId : T_MAXSTRING;
	sessionId : T_MAXSTRING;
	sessionData : I_SessionData;
	chunkedRequestData : I_ChunkedRequestData;
	chunkedRequest : ChunkedRequest(Request, chunkedRequestData);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[hasChunkSequenceHeader := headerAccessor.TryGetChunkSequenceFromRequest(Request, chunkSequence);
hasChunkTotalHeader := headerAccessor.TryGetChunkTotalFromRequest(Request, chunkTotal);
hasMoreChunksHeader := headerAccessor.TryGetHasMoreChunksFromRequest(Request, hasMoreChunks);

IF (NOT hasChunkSequenceHeader) AND (NOT hasChunkTotalHeader) AND (NOT hasMoreChunksHeader) THEN
	// this is not a chunked request, simply return and it will be handled by the next middleware automatically.
	RETURN;
END_IF

// when reaching here we know that the request has at least one of the headers associated with chunked requests
// from this point on, we simply validate until we know we have all the required parts. 

IF NOT hasChunkSequenceHeader THEN
	response.Error('Chunked Request found, but chunk sequence header data is missing');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF chunkSequence = 0 THEN
	response.Error('Chunk sequence 0 received, chunks must start from 1');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT hasChunkTotalHeader THEN
	response.Error('Chunked Request found, but chunk total header data is missing');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF chunkSequence > chunkTotal THEN
	response.Error('Chunk sequence is greater than the chunk total');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT hasMoreChunksHeader THEN
	response.Error('Chunked Request found, but has more chunks header data is missing');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT headerAccessor.TryGetRequestIdFromRequest(Request, requestId) THEN
	response.Error('Chunked Request found, but request id header data is missing');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT headerAccessor.TryGetSessionIdFromRequest(Request, sessionId) THEN
	response.Error('Chunked Request found, but session id header data is missing');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

// at this point we know we have all of the data required for handling a chunked request

IF NOT sessionStorage.TryRetreiveSessionDataById(sessionId, requestId, sessionData) THEN	
	chunkedRequestData := CreateChunkedRequestData(maximumChunkSizeInBytes, DINT_TO_UDINT(chunkTotal));
	sessionStorage.TryStoreSessionDataById(sessionId, requestId, chunkedRequestData);
ELSIF NOT __QUERYINTERFACE(sessionData, chunkedRequestData) THEN
	response.Error('Server was unable to retreive previous session data as chunked request data');
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT chunkedRequestData.TryAddChunkedPayload(request.PayloadAddress, request.PayloadSizeInBytes, chunkSequence) THEN
	response.Error('Unable to store request payload in chunk session storage');
	sessionStorage.DisposeSessionDataById(sessionId, requestId);
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

IF NOT chunkedRequestData.IsComplete THEN
	Response.Accepted();
	TryHandleIncomingRequest := TRUE;
	RETURN;
END_IF

NextMidleware.Handle(chunkedRequest, Response);
sessionStorage.DisposeSessionDataById(sessionId, requestId);
TryHandleIncomingRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>